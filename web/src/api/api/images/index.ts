/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorModelFromDiscriminatorValue, createResponseFromDiscriminatorValue, type ErrorModel, type Response } from '../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/images
 */
export interface ImagesRequestBuilder extends BaseRequestBuilder<ImagesRequestBuilder> {
    /**
     * Get API images
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Response>}
     * @throws {ErrorModel} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ImagesRequestBuilderGetQueryParameters> | undefined) : Promise<Response | undefined>;
    /**
     * Get API images
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ImagesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get API images
 */
export interface ImagesRequestBuilderGetQueryParameters {
    limit?: number;
    offset?: number;
    youtubeId?: string;
}
/**
 * Uri template for the request builder.
 */
export const ImagesRequestBuilderUriTemplate = "{+baseurl}/api/images{?limit,offset,youtube_id}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ImagesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "youtubeId": "youtube_id",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ImagesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ImagesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createErrorModelFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createResponseFromDiscriminatorValue,
        queryParametersMapper: ImagesRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
