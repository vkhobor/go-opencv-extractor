/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCreatedJobFromDiscriminatorValue, createErrorModelFromDiscriminatorValue, createListJobResponseFromDiscriminatorValue, serializeCreatedJob, serializeCreateJob, type CreatedJob, type CreateJob, type ErrorModel, type ListJobResponse } from '../../models/';
// @ts-ignore
import { JobsItemRequestBuilderNavigationMetadata, JobsItemRequestBuilderRequestsMetadata, type JobsItemRequestBuilder } from './item/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/jobs
 */
export interface JobsRequestBuilder extends BaseRequestBuilder<JobsRequestBuilder> {
    /**
     * Gets an item from the ApiSDK.api.jobs.item collection
     * @param id Unique identifier of the item
     * @returns {JobsItemRequestBuilder}
     */
     byId(id: string) : JobsItemRequestBuilder;
    /**
     * List API jobs
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ListJobResponse[]>}
     * @throws {ErrorModel} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ListJobResponse[] | undefined>;
    /**
     * Create a new job
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CreatedJob>}
     * @throws {ErrorModel} error when the service returns a 4XX or 5XX status code
     */
     post(body: CreateJob, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CreatedJob | undefined>;
    /**
     * List API jobs
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Create a new job
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateJob, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const JobsRequestBuilderUriTemplate = "{+baseurl}/api/jobs";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const JobsRequestBuilderNavigationMetadata: Record<Exclude<keyof JobsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: JobsItemRequestBuilderRequestsMetadata,
        navigationMetadata: JobsItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const JobsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: JobsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createErrorModelFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createListJobResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: JobsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createErrorModelFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCreatedJobFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateJob,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
