// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: video.sql

package db_sql

import (
	"context"
	"database/sql"
)

const addBlobToVideo = `-- name: AddBlobToVideo :one
UPDATE yt_videos
SET
 blob_storage_id = ?
WHERE id = ?
RETURNING id, job_id, status, error, blob_storage_id, "foreign"
`

type AddBlobToVideoParams struct {
	BlobStorageID sql.NullString
	ID            string
}

func (q *Queries) AddBlobToVideo(ctx context.Context, arg AddBlobToVideoParams) (YtVideo, error) {
	row := q.db.QueryRowContext(ctx, addBlobToVideo, arg.BlobStorageID, arg.ID)
	var i YtVideo
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.Status,
		&i.Error,
		&i.BlobStorageID,
		&i.Foreign,
	)
	return i, err
}

const addYtVideo = `-- name: AddYtVideo :one
INSERT INTO yt_videos (
  id, job_id, status

) VALUES (
  ?, ?, ?
)
RETURNING id, job_id, status, error, blob_storage_id, "foreign"
`

type AddYtVideoParams struct {
	ID     string
	JobID  sql.NullString
	Status sql.NullString
}

func (q *Queries) AddYtVideo(ctx context.Context, arg AddYtVideoParams) (YtVideo, error) {
	row := q.db.QueryRowContext(ctx, addYtVideo, arg.ID, arg.JobID, arg.Status)
	var i YtVideo
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.Status,
		&i.Error,
		&i.BlobStorageID,
		&i.Foreign,
	)
	return i, err
}

const getScrapedVideos = `-- name: GetScrapedVideos :many
SELECT id, job_id, status, error, blob_storage_id, "foreign" FROM yt_videos WHERE status = "scraped"
`

func (q *Queries) GetScrapedVideos(ctx context.Context) ([]YtVideo, error) {
	rows, err := q.db.QueryContext(ctx, getScrapedVideos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []YtVideo
	for rows.Next() {
		var i YtVideo
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.Status,
			&i.Error,
			&i.BlobStorageID,
			&i.Foreign,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideosDownloaded = `-- name: GetVideosDownloaded :many
SELECT yt_videos.id, job_id, status, error, blob_storage_id, "foreign", blob_storage.id, path FROM yt_videos JOIN blob_storage ON yt_videos.blob_storage_id = blob_storage.id WHERE status = "downloaded"
`

type GetVideosDownloadedRow struct {
	ID            string
	JobID         sql.NullString
	Status        sql.NullString
	Error         sql.NullString
	BlobStorageID sql.NullString
	Foreign       interface{}
	ID_2          string
	Path          string
}

func (q *Queries) GetVideosDownloaded(ctx context.Context) ([]GetVideosDownloadedRow, error) {
	rows, err := q.db.QueryContext(ctx, getVideosDownloaded)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVideosDownloadedRow
	for rows.Next() {
		var i GetVideosDownloadedRow
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.Status,
			&i.Error,
			&i.BlobStorageID,
			&i.Foreign,
			&i.ID_2,
			&i.Path,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYtVideo = `-- name: GetYtVideo :one
SELECT id, job_id, status, error, blob_storage_id, "foreign" FROM yt_videos WHERE id = ?
`

func (q *Queries) GetYtVideo(ctx context.Context, id string) (YtVideo, error) {
	row := q.db.QueryRowContext(ctx, getYtVideo, id)
	var i YtVideo
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.Status,
		&i.Error,
		&i.BlobStorageID,
		&i.Foreign,
	)
	return i, err
}

const updateStatus = `-- name: UpdateStatus :one
UPDATE yt_videos
SET
  status = ?
,error = ?
WHERE id = ?
RETURNING id, job_id, status, error, blob_storage_id, "foreign"
`

type UpdateStatusParams struct {
	Status sql.NullString
	Error  sql.NullString
	ID     string
}

func (q *Queries) UpdateStatus(ctx context.Context, arg UpdateStatusParams) (YtVideo, error) {
	row := q.db.QueryRowContext(ctx, updateStatus, arg.Status, arg.Error, arg.ID)
	var i YtVideo
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.Status,
		&i.Error,
		&i.BlobStorageID,
		&i.Foreign,
	)
	return i, err
}
