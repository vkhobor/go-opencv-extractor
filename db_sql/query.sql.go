// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db_sql

import (
	"context"
	"database/sql"
)

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (
  search_query
) VALUES (
  ?
)
RETURNING search_query
`

func (q *Queries) CreateJob(ctx context.Context, searchQuery sql.NullString) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, createJob, searchQuery)
	var search_query sql.NullString
	err := row.Scan(&search_query)
	return search_query, err
}

const getJob = `-- name: GetJob :one
SELECT search_query FROM jobs
WHERE search_query = ? LIMIT 1
`

func (q *Queries) GetJob(ctx context.Context, searchQuery sql.NullString) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getJob, searchQuery)
	var search_query sql.NullString
	err := row.Scan(&search_query)
	return search_query, err
}

const listJobs = `-- name: ListJobs :many
SELECT search_query FROM jobs
ORDER BY name
`

func (q *Queries) ListJobs(ctx context.Context) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, listJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var search_query sql.NullString
		if err := rows.Scan(&search_query); err != nil {
			return nil, err
		}
		items = append(items, search_query)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
