version: "3"

interval: "500ms"

vars:
  GO_EXTRACTOR_DEV_SERVER_PORT: 7001
  GO_EXTRACTOR_DEV_CLIENT_PORT: 4200

tasks:
  server:
    desc: "Run the server, uses ./tmp as storage, port is {{.GO_EXTRACTOR_DEV_SERVER_PORT}}"
    aliases: [s]
    cmds:
      - go run . serve -p {{.GO_EXTRACTOR_DEV_SERVER_PORT}} --blob-storage ./.tmp/blob --db ./.tmp/db.sqlite3 --log-folder ./.tmp/logs

  client:
    desc: "Run the client, port is {{.GO_EXTRACTOR_DEV_CLIENT_PORT}}"
    dir: web
    aliases: [c]
    cmds:
      - NG_APP_API_URL=http://localhost:{{.GO_EXTRACTOR_DEV_SERVER_PORT}}/api npm run start -- --port {{.GO_EXTRACTOR_DEV_CLIENT_PORT}}

  preview:
    desc: "Build the client and serve it embedded in the server"
    deps: ["build:client"]
    aliases: [p]
    cmds:
      - task: server

  generate-openapi:
    desc: "Generate OpenAPI documentation to ./doc folder"
    aliases: [o, openapi]
    sources:
      - ./api/*.go
    generates:
      - ./doc/openapi.yaml
    vars:
      PORT: "{{randInt 1000 10000}}"
    cmds:
      - go run . openapi -p {{.PORT}} -o ./doc

  client:generate:
    desc: "Generate client code from OpenAPI specification"
    aliases: [c:gen]
    deps: [generate-openapi]
    sources:
      - ./doc/openapi.yaml
    generates:
      - web/src/api.ts
    dir: web
    cmds:
      - npm run gen-client

  sql:generate-sqlc-methods:
    desc: "Generate go code from SQL queries and schema using sqlc"
    aliases: [s:gen]
    deps: [install:sqlc]
    watch: true
    sources:
      - db/migrations/*.sql
      - db/queries/*.sql
    generates:
      - db/db.go
      - db/models.go
      - db/*.sql.go
    cmds:
      - sqlc generate

  sql:generate-migration:
    desc: "Adds a new migration"
    aliases: [s:m]
    deps: [install:migrate]
    dir: db/migrations
    preconditions:
      - sh: test -n "{{.CLI_ARGS}}"
        msg: "Please provide a name for the migration"
    cmds:
      - migrate create -ext sql {{.CLI_ARGS}}

  sql:delete-last-migration:
    aliases: [s:delete]
    desc: "Deletes the last migration"
    dir: db/migrations
    cmds:
      - rm -f $(ls -t | head -n2)

  sql:redo-last-migration:
    aliases: [s:redo]
    desc: "Delete the last migration and generate it again"
    dir: db/migrations
    deps: [sql:delete-last-migration]
    preconditions:
      - sh: test -n "{{.CLI_ARGS}}"
        msg: "Please provide a name for the migration"
    cmds:
      - task: generate-migration

  # Advanced development related tasks

  compose-up:
    desc: "Run docker compose up"
    aliases: [up]
    cmds:
      - docker compose up

  compose-up:build:
    desc: "Run docker compose up --build"
    aliases: [up:b]
    cmds:
      - docker compose up --build

  install:sqlc:
    desc: "Install sqlc"
    cmds:
      - go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest
    status:
      - sqlc --help

  install:golang-migrate:
    desc: "Install migrate tool for database migrations"
    status:
      - migrate -version
    cmds:
      - go install -tags 'sqlite3' github.com/golang-migrate/migrate/v4/cmd/migrate@latest

  install:all:
    aliases: [i:a]
    desc: "Install all development dependencies"
    deps: [install:sqlc, install:golang-migrate]

  # Production related tasks

  client:build:
    desc: "Build the client"
    dir: web
    aliases: [c:b]
    sources:
      - src/**/*.*
    generates:
      - dist/**/*.*
    cmds:
      - npm run build

  docker:build:base:
    desc: "Build the base image containing compile and runtime dependencies"
    cmds:
      - docker build --platform linux/amd64,linux/arm64 --push -t vkhobor/bullseye-gocv-multiplatform -f bullseye-gocv-multiplatform.Dockerfile .

  docker:new-builder:
    desc: "Create a new builder"
    cmds:
      - docker buildx create --name builderx --use

  docker:build:amd:
    desc: "Build the image for amd64"
    cmds:
      - docker buildx build --platform linux/amd64 -t vkhobor/extractor:latest --pull --load .

  docker:build:amd:no-cache:
    desc: "Build the image for amd64 without cache"
    cmds:
      - docker buildx build --platform linux/amd64  --no-cache -t vkhobor/extractor:latest --pull --load .

  docker:publish:
    desc: "Build and publish the image using multiplatorm to Docker Hub"
    aliases: [p]
    cmds:
      - docker buildx build --platform linux/amd64,linux/arm64 -t vkhobor/extractor:latest --pull --push .

  docker:test-dockerignore:
    desc: "Test the .dockerignore file in a bare container"
    summary: |
      Run the following after: `docker container run --rm -it build-context /bin/sh`
      --rm removes the container after
      -it runs it in interactive
      busybox is just a small image
    cmds:
      - docker image build --no-cache -t build-context --load -f - . <<EOF
      - FROM busybox
      - WORKDIR /build-context
      - COPY . .
      - CMD find .
      - EOF
