version: "3"

interval: "500ms"

vars:
  GO_EXTRACTOR_DEV_SERVER_PORT: 7000
  GO_EXTRACTOR_DEV_CLIENT_PORT: 4200

tasks:
  # Basic development related tasks

  dev:
    deps:
      - server
      - client:dev

  server:
    cmds:
      - go run . serve -p {{.GO_EXTRACTOR_DEV_SERVER_PORT}} --blob-storage ./.tmp/blob --db ./.tmp/db.sqlite3 --log-folder ./.tmp/logs

  client:dev:
    dir: web
    cmds:
      - NG_APP_API_URL=http://localhost:{{.GO_EXTRACTOR_DEV_SERVER_PORT}}/api npm run start -- --port {{.GO_EXTRACTOR_DEV_CLIENT_PORT}}

  preview:
    deps: ["client:build"]
    cmds:
      - task: server

  generate-openapi:
    aliases: [gen-openapi]
    vars:
      PORT: "{{randInt 1000 10000}}"
    cmds:
      - go run . openapi -p {{.PORT}} -o ./doc

  # Advanced development related tasks

  compose-up:
    aliases: [up]
    cmds:
      - docker compose up
      -
  compose-up:build:
    aliases: [upb]
    cmds:
      - docker compose up --build

  install-sqlc:
    cmds:
      - go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest
    status:
      - sqlc --help
  install-migrate:
    status:
      - migrate -version
    cmds:
      - go install -tags 'sqlite3' github.com/golang-migrate/migrate/v4/cmd/migrate@latest

  install-dev-deps:
    deps: [install-sqlc, install-migrate]

  generate-sqlc-methods:
    aliases: [sqlc]
    deps: [install-sqlc]
    watch: true
    sources:
      - db/migrations/*.sql
      - db/queries/*.sql
    generates:
      - db/db.go
      - db/models.go
      - db/*.sql.go
    cmds:
      - sqlc generate

  generate-migration:
    deps: [install-migrate]
    dir: db/migrations
    preconditions:
      - sh: test -n "{{.CLI_ARGS}}"
        msg: "Please provide a name for the migration"
    cmds:
      - migrate create -ext sql {{.CLI_ARGS}}

  delete-last-migration:
    dir: db/migrations
    cmds:
      - rm -f $(ls -t | head -n2)

  redo-last-migration:
    dir: db/migrations
    deps: [delete-last-migration]
    preconditions:
      - sh: test -n "{{.CLI_ARGS}}"
        msg: "Please provide a name for the migration"
    cmds:
      - task: generate-migration

  # Production related tasks

  client:build:
    dir: web
    sources:
      - src/**/*.*
    generates:
      - dist/**/*.*
    cmds:
      - npm run build

  docker:build:starter:
    cmds:
      - docker build --platform linux/amd64,linux/arm64 --push -t vkhobor/bullseye-gocv-multiplatform -f bullseye-gocv-multiplatform .

  docker:new-builder:
    cmds:
      - docker buildx create --name builderx --use

  docker:build:amd:
    cmds:
      - docker buildx build --platform linux/amd64 -t vkhobor/extractor:latest --pull --load .

  docker:rebuild:amd:
    cmds:
      - docker buildx build --platform linux/amd64  --no-cache -t vkhobor/extractor:latest --pull --load .

  docker:build:all:
    aliases: [dockb]
    cmds:
      - docker buildx build --platform linux/amd64,linux/arm64 -t vkhobor/extractor:latest --pull --push .

  # Run the following after: docker container run --rm -it build-context /bin/sh
  docker:test-dockerignore:
    cmds:
      - docker image build --no-cache -t build-context --load -f - . <<EOF
      - FROM busybox
      - WORKDIR /build-context
      - COPY . .
      - CMD find .
      - EOF
