// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: picture.sql

package db

import (
	"context"
	"database/sql"
)

const addPicture = `-- name: AddPicture :exec
INSERT into
    pictures (
        id,
        import_attempt_id,
        frame_number,
        blob_storage_id
    )
VALUES
    (?, ?, ?, ?)
`

type AddPictureParams struct {
	ID              string
	ImportAttemptID sql.NullString
	FrameNumber     sql.NullInt64
	BlobStorageID   sql.NullString
}

func (q *Queries) AddPicture(ctx context.Context, arg AddPictureParams) error {
	_, err := q.db.ExecContext(ctx, addPicture,
		arg.ID,
		arg.ImportAttemptID,
		arg.FrameNumber,
		arg.BlobStorageID,
	)
	return err
}

const allPicturesCount = `-- name: AllPicturesCount :one
SELECT
    COUNT(*) as count_all
FROM
    pictures
    JOIN import_attempts ON pictures.import_attempt_id = import_attempts.id
WHERE
    ?1 = false
    OR import_attempts.yt_video_id = ?2
`

type AllPicturesCountParams struct {
	IsFilterByYoutubeID interface{}
	YoutubeID           sql.NullString
}

func (q *Queries) AllPicturesCount(ctx context.Context, arg AllPicturesCountParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, allPicturesCount, arg.IsFilterByYoutubeID, arg.YoutubeID)
	var count_all int64
	err := row.Scan(&count_all)
	return count_all, err
}

const getPictures = `-- name: GetPictures :many
SELECT
    pictures.id, import_attempt_id, frame_number, blob_storage_id, import_attempts.id, yt_video_id, filter_id, progress, error
FROM
    pictures
    JOIN import_attempts ON pictures.import_attempt_id = import_attempts.id
WHERE
    ? = false
    OR import_attempts.yt_video_id = ?
LIMIT
    ?
OFFSET
    ?
`

type GetPicturesParams struct {
	IsFilterByYoutubeID interface{}
	YoutubeID           sql.NullString
	Limit               int64
	Offset              int64
}

type GetPicturesRow struct {
	ID              string
	ImportAttemptID sql.NullString
	FrameNumber     sql.NullInt64
	BlobStorageID   sql.NullString
	ID_2            string
	YtVideoID       sql.NullString
	FilterID        sql.NullString
	Progress        sql.NullInt64
	Error           sql.NullString
}

func (q *Queries) GetPictures(ctx context.Context, arg GetPicturesParams) ([]GetPicturesRow, error) {
	rows, err := q.db.QueryContext(ctx, getPictures,
		arg.IsFilterByYoutubeID,
		arg.YoutubeID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPicturesRow
	for rows.Next() {
		var i GetPicturesRow
		if err := rows.Scan(
			&i.ID,
			&i.ImportAttemptID,
			&i.FrameNumber,
			&i.BlobStorageID,
			&i.ID_2,
			&i.YtVideoID,
			&i.FilterID,
			&i.Progress,
			&i.Error,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
