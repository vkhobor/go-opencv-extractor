// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: job.sql

package db

import (
	"context"
	"database/sql"
)

const createJob = `-- name: CreateJob :one
INSERT INTO
    jobs (id, search_query, "limit",youtube_id, filter_id)
VALUES
    (?, ?, ?,?, ?) RETURNING id, search_query, filter_id, youtube_id, "limit"
`

type CreateJobParams struct {
	ID          string
	SearchQuery sql.NullString
	Limit       sql.NullInt64
	YoutubeID   sql.NullString
	FilterID    sql.NullString
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.db.QueryRowContext(ctx, createJob,
		arg.ID,
		arg.SearchQuery,
		arg.Limit,
		arg.YoutubeID,
		arg.FilterID,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.SearchQuery,
		&i.FilterID,
		&i.YoutubeID,
		&i.Limit,
	)
	return i, err
}

const getJob = `-- name: GetJob :one
SELECT
    j.id AS id,
    j.search_query AS search_query,
    j."limit" AS "limit",
    j.youtube_id AS youtube_id,
    COUNT(v.id) AS videos_found
FROM
    jobs j
    LEFT JOIN yt_videos v ON j.id = v.job_id
WHERE
    j.id = ?
GROUP BY
    j.id,
    j.search_query,
    j."limit"
`

type GetJobRow struct {
	ID          string
	SearchQuery sql.NullString
	Limit       sql.NullInt64
	YoutubeID   sql.NullString
	VideosFound int64
}

func (q *Queries) GetJob(ctx context.Context, id string) (GetJobRow, error) {
	row := q.db.QueryRowContext(ctx, getJob, id)
	var i GetJobRow
	err := row.Scan(
		&i.ID,
		&i.SearchQuery,
		&i.Limit,
		&i.YoutubeID,
		&i.VideosFound,
	)
	return i, err
}
