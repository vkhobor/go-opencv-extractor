// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: job.sql

package db

import (
	"context"
	"database/sql"
)

const createJob = `-- name: CreateJob :one
INSERT INTO
    jobs (id, search_query, "limit",youtube_id, filter_id)
VALUES
    (?, ?, ?,?, ?) RETURNING id, search_query, filter_id, youtube_id, "limit"
`

type CreateJobParams struct {
	ID          string
	SearchQuery sql.NullString
	Limit       sql.NullInt64
	YoutubeID   sql.NullString
	FilterID    sql.NullString
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.db.QueryRowContext(ctx, createJob,
		arg.ID,
		arg.SearchQuery,
		arg.Limit,
		arg.YoutubeID,
		arg.FilterID,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.SearchQuery,
		&i.FilterID,
		&i.YoutubeID,
		&i.Limit,
	)
	return i, err
}

const getJob = `-- name: GetJob :one
SELECT
    j.id AS id,
    j.search_query AS search_query,
    j."limit" AS "limit",
    j.youtube_id AS youtube_id,
    COUNT(v.id) AS videos_found
FROM
    jobs j
    LEFT JOIN yt_videos v ON j.id = v.job_id
WHERE
    j.id = ?
GROUP BY
    j.id,
    j.search_query,
    j."limit"
`

type GetJobRow struct {
	ID          string
	SearchQuery sql.NullString
	Limit       sql.NullInt64
	YoutubeID   sql.NullString
	VideosFound int64
}

func (q *Queries) GetJob(ctx context.Context, id string) (GetJobRow, error) {
	row := q.db.QueryRowContext(ctx, getJob, id)
	var i GetJobRow
	err := row.Scan(
		&i.ID,
		&i.SearchQuery,
		&i.Limit,
		&i.YoutubeID,
		&i.VideosFound,
	)
	return i, err
}

const getJobs = `-- name: GetJobs :many
SELECT
    COUNT(yt_videos.id) AS videos_found,
    jobs.id,
    jobs."limit",
    jobs.search_query,
    jobs.filter_id,
    jobs.youtube_id
FROM
    jobs
    LEFT JOIN yt_videos ON jobs.id = yt_videos.job_id
GROUP BY
    jobs.id
`

type GetJobsRow struct {
	VideosFound int64
	ID          string
	Limit       sql.NullInt64
	SearchQuery sql.NullString
	FilterID    sql.NullString
	YoutubeID   sql.NullString
}

func (q *Queries) GetJobs(ctx context.Context) ([]GetJobsRow, error) {
	rows, err := q.db.QueryContext(ctx, getJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetJobsRow
	for rows.Next() {
		var i GetJobsRow
		if err := rows.Scan(
			&i.VideosFound,
			&i.ID,
			&i.Limit,
			&i.SearchQuery,
			&i.FilterID,
			&i.YoutubeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideosForJob = `-- name: GetVideosForJob :many
SELECT
    v.id AS video_youtube_id,
    COUNT(successDownload.yt_video_id) AS download_attempts_success,
    COUNT(errorDownload.yt_video_id) AS download_attempts_error,
    COUNT(successImport.yt_video_id) AS import_attempts_success,
    COUNT(successImport.yt_video_id) AS import_attempts_error
FROM
    jobs j
    JOIN yt_videos v ON j.id = v.job_id
    LEFT JOIN (
        SELECT
            yt_video_id
        FROM
            download_attempts
        WHERE
            error is null
    ) successDownload ON v.id = successDownload.yt_video_id
    LEFT JOIN (
        SELECT
            yt_video_id
        FROM
            download_attempts
        WHERE
            error is not null
    ) errorDownload ON v.id = errorDownload.yt_video_id
    LEFT JOIN (
        SELECT
            yt_video_id
        FROM
            import_attempts
        WHERE
            error is null
            and progress = 100
    ) successImport ON v.id = successImport.yt_video_id
    LEFT JOIN (
        SELECT
            yt_video_id
        FROM
            import_attempts
        WHERE
            error is not null
            and progress is not 100
    ) errorImport ON v.id = successImport.yt_video_id
WHERE
    j.id = ?
GROUP BY
    v.id
`

type GetVideosForJobRow struct {
	VideoYoutubeID          string
	DownloadAttemptsSuccess int64
	DownloadAttemptsError   int64
	ImportAttemptsSuccess   int64
	ImportAttemptsError     int64
}

func (q *Queries) GetVideosForJob(ctx context.Context, id string) ([]GetVideosForJobRow, error) {
	rows, err := q.db.QueryContext(ctx, getVideosForJob, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVideosForJobRow
	for rows.Next() {
		var i GetVideosForJobRow
		if err := rows.Scan(
			&i.VideoYoutubeID,
			&i.DownloadAttemptsSuccess,
			&i.DownloadAttemptsError,
			&i.ImportAttemptsSuccess,
			&i.ImportAttemptsError,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobsWithVideos = `-- name: ListJobsWithVideos :many
SELECT
    jobs.id, search_query, filter_id, youtube_id, "limit", yt_videos.id, name, job_id
FROM
    jobs
    LEFT JOIN yt_videos ON jobs.id = yt_videos.job_id
`

type ListJobsWithVideosRow struct {
	ID          string
	SearchQuery sql.NullString
	FilterID    sql.NullString
	YoutubeID   sql.NullString
	Limit       sql.NullInt64
	ID_2        sql.NullString
	Name        sql.NullString
	JobID       sql.NullString
}

func (q *Queries) ListJobsWithVideos(ctx context.Context) ([]ListJobsWithVideosRow, error) {
	rows, err := q.db.QueryContext(ctx, listJobsWithVideos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListJobsWithVideosRow
	for rows.Next() {
		var i ListJobsWithVideosRow
		if err := rows.Scan(
			&i.ID,
			&i.SearchQuery,
			&i.FilterID,
			&i.YoutubeID,
			&i.Limit,
			&i.ID_2,
			&i.Name,
			&i.JobID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJobLimit = `-- name: UpdateJobLimit :exec
UPDATE jobs
SET
    "limit" = ?
WHERE
    id = ?
`

type UpdateJobLimitParams struct {
	Limit sql.NullInt64
	ID    string
}

func (q *Queries) UpdateJobLimit(ctx context.Context, arg UpdateJobLimitParams) error {
	_, err := q.db.ExecContext(ctx, updateJobLimit, arg.Limit, arg.ID)
	return err
}
