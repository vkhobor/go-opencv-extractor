// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: job.sql

package db

import (
	"context"
	"database/sql"
)

const createJob = `-- name: CreateJob :one
INSERT INTO
    jobs (id, search_query, "limit", filter_id)
VALUES
    (?, ?, ?, ?) RETURNING id, search_query, filter_id, "limit"
`

type CreateJobParams struct {
	ID          string
	SearchQuery sql.NullString
	Limit       sql.NullInt64
	FilterID    sql.NullString
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.db.QueryRowContext(ctx, createJob,
		arg.ID,
		arg.SearchQuery,
		arg.Limit,
		arg.FilterID,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.SearchQuery,
		&i.FilterID,
		&i.Limit,
	)
	return i, err
}

const getJob = `-- name: GetJob :one
SELECT
    j.id AS id,
    j.search_query AS search_query,
    j."limit" AS "limit",
    COUNT(DISTINCT v.id) AS videos_found
FROM
    jobs j
    LEFT JOIN yt_videos v ON j.id = v.job_id
WHERE
    j.id = ?
GROUP BY
    j.id,
    j.search_query,
    j."limit"
`

type GetJobRow struct {
	ID          string
	SearchQuery sql.NullString
	Limit       sql.NullInt64
	VideosFound int64
}

func (q *Queries) GetJob(ctx context.Context, id string) (GetJobRow, error) {
	row := q.db.QueryRowContext(ctx, getJob, id)
	var i GetJobRow
	err := row.Scan(
		&i.ID,
		&i.SearchQuery,
		&i.Limit,
		&i.VideosFound,
	)
	return i, err
}

const getJobs = `-- name: GetJobs :many
SELECT
    COALESCE(found_videos, 0),
    jobs.id,
    jobs."limit",
    jobs.search_query,
    jobs.filter_id
FROM
    jobs
    LEFT JOIN (
        SELECT
            COUNT(*) as found_videos,
            jobs.id
        FROM
            jobs
            LEFT JOIN yt_videos ON jobs.id = yt_videos.job_id
        WHERE
            yt_videos.id IS NOT NULL
        GROUP BY
            jobs.id
    ) as t ON t.id = jobs.id
`

type GetJobsRow struct {
	FoundVideos int64
	ID          string
	Limit       sql.NullInt64
	SearchQuery sql.NullString
	FilterID    sql.NullString
}

func (q *Queries) GetJobs(ctx context.Context) ([]GetJobsRow, error) {
	rows, err := q.db.QueryContext(ctx, getJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetJobsRow
	for rows.Next() {
		var i GetJobsRow
		if err := rows.Scan(
			&i.FoundVideos,
			&i.ID,
			&i.Limit,
			&i.SearchQuery,
			&i.FilterID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideosForJob = `-- name: GetVideosForJob :many
SELECT
    j.id AS id,
    v.id AS video_youtube_id
FROM
    jobs j
    JOIN yt_videos v ON j.id = v.job_id
WHERE
    j.id = ?
`

type GetVideosForJobRow struct {
	ID             string
	VideoYoutubeID string
}

func (q *Queries) GetVideosForJob(ctx context.Context, id string) ([]GetVideosForJobRow, error) {
	rows, err := q.db.QueryContext(ctx, getVideosForJob, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVideosForJobRow
	for rows.Next() {
		var i GetVideosForJobRow
		if err := rows.Scan(&i.ID, &i.VideoYoutubeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobsWithVideos = `-- name: ListJobsWithVideos :many
SELECT
    jobs.id, search_query, filter_id, "limit", yt_videos.id, job_id
FROM
    jobs
    LEFT JOIN yt_videos ON jobs.id = yt_videos.job_id
`

type ListJobsWithVideosRow struct {
	ID          string
	SearchQuery sql.NullString
	FilterID    sql.NullString
	Limit       sql.NullInt64
	ID_2        sql.NullString
	JobID       sql.NullString
}

func (q *Queries) ListJobsWithVideos(ctx context.Context) ([]ListJobsWithVideosRow, error) {
	rows, err := q.db.QueryContext(ctx, listJobsWithVideos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListJobsWithVideosRow
	for rows.Next() {
		var i ListJobsWithVideosRow
		if err := rows.Scan(
			&i.ID,
			&i.SearchQuery,
			&i.FilterID,
			&i.Limit,
			&i.ID_2,
			&i.JobID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
