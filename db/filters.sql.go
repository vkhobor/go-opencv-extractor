// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: filters.sql

package db

import (
	"context"
	"database/sql"
)

const addFilter = `-- name: AddFilter :one
INSERT
OR REPLACE INTO filters (
    id,
    "name",
    discriminator,
    ratioTestThreshold,
    minThresholdForSURFMatches,
    minSURFMatches,
    MSESkip
)
VALUES
    (?, ?, ?, ?, ?, ?, ?) RETURNING id, name, discriminator, ratiotestthreshold, minthresholdforsurfmatches, minsurfmatches, mseskip
`

type AddFilterParams struct {
	ID                         string
	Name                       sql.NullString
	Discriminator              sql.NullString
	Ratiotestthreshold         sql.NullFloat64
	Minthresholdforsurfmatches sql.NullFloat64
	Minsurfmatches             sql.NullInt64
	Mseskip                    sql.NullFloat64
}

func (q *Queries) AddFilter(ctx context.Context, arg AddFilterParams) (Filter, error) {
	row := q.db.QueryRowContext(ctx, addFilter,
		arg.ID,
		arg.Name,
		arg.Discriminator,
		arg.Ratiotestthreshold,
		arg.Minthresholdforsurfmatches,
		arg.Minsurfmatches,
		arg.Mseskip,
	)
	var i Filter
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Discriminator,
		&i.Ratiotestthreshold,
		&i.Minthresholdforsurfmatches,
		&i.Minsurfmatches,
		&i.Mseskip,
	)
	return i, err
}

const attachImageToFilter = `-- name: AttachImageToFilter :one
INSERT INTO
    filter_images (filter_id, blob_storage_id)
VALUES
    (?, ?) RETURNING filter_id, blob_storage_id
`

type AttachImageToFilterParams struct {
	FilterID      sql.NullString
	BlobStorageID sql.NullString
}

func (q *Queries) AttachImageToFilter(ctx context.Context, arg AttachImageToFilterParams) (FilterImage, error) {
	row := q.db.QueryRowContext(ctx, attachImageToFilter, arg.FilterID, arg.BlobStorageID)
	var i FilterImage
	err := row.Scan(&i.FilterID, &i.BlobStorageID)
	return i, err
}

const deleteImagesOnFilter = `-- name: DeleteImagesOnFilter :exec
DELETE FROM filter_images
WHERE
    filter_id = ?1
`

func (q *Queries) DeleteImagesOnFilter(ctx context.Context, filterID sql.NullString) error {
	_, err := q.db.ExecContext(ctx, deleteImagesOnFilter, filterID)
	return err
}

const getFilterById = `-- name: GetFilterById :many
SELECT
    f.id, f.name, f.discriminator, f.ratiotestthreshold, f.minthresholdforsurfmatches, f.minsurfmatches, f.mseskip,
    fi.blob_storage_id
FROM
    filters f
    LEFT JOIN filter_images fi ON f.id = fi.filter_id
WHERE
    f.id = ?
`

type GetFilterByIdRow struct {
	ID                         string
	Name                       sql.NullString
	Discriminator              sql.NullString
	Ratiotestthreshold         sql.NullFloat64
	Minthresholdforsurfmatches sql.NullFloat64
	Minsurfmatches             sql.NullInt64
	Mseskip                    sql.NullFloat64
	BlobStorageID              sql.NullString
}

func (q *Queries) GetFilterById(ctx context.Context, id string) ([]GetFilterByIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getFilterById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFilterByIdRow
	for rows.Next() {
		var i GetFilterByIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Discriminator,
			&i.Ratiotestthreshold,
			&i.Minthresholdforsurfmatches,
			&i.Minsurfmatches,
			&i.Mseskip,
			&i.BlobStorageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilterForJob = `-- name: GetFilterForJob :many
SELECT
    filters.id, filters.name, filters.discriminator, filters.ratiotestthreshold, filters.minthresholdforsurfmatches, filters.minsurfmatches, filters.mseskip,
    blob_storage.id, blob_storage.path
FROM
    jobs
    JOIN filters ON jobs.filter_id = filters.id
    JOIN filter_images ON filters.id = filter_images.filter_id
    JOIN blob_storage ON filter_images.blob_storage_id = blob_storage.id
WHERE
    jobs.id = ?
`

type GetFilterForJobRow struct {
	ID                         string
	Name                       sql.NullString
	Discriminator              sql.NullString
	Ratiotestthreshold         sql.NullFloat64
	Minthresholdforsurfmatches sql.NullFloat64
	Minsurfmatches             sql.NullInt64
	Mseskip                    sql.NullFloat64
	ID_2                       string
	Path                       string
}

func (q *Queries) GetFilterForJob(ctx context.Context, id string) ([]GetFilterForJobRow, error) {
	rows, err := q.db.QueryContext(ctx, getFilterForJob, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFilterForJobRow
	for rows.Next() {
		var i GetFilterForJobRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Discriminator,
			&i.Ratiotestthreshold,
			&i.Minthresholdforsurfmatches,
			&i.Minsurfmatches,
			&i.Mseskip,
			&i.ID_2,
			&i.Path,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilters = `-- name: GetFilters :many
SELECT
    blob_storage.id as blob_id,
    filters.id, name, discriminator, ratiotestthreshold, minthresholdforsurfmatches, minsurfmatches, mseskip, filter_id, blob_storage_id, blob_storage.id, path
FROM
    filters
    LEFT JOIN filter_images ON filters.id = filter_images.filter_id
    LEFT JOIN blob_storage ON filter_images.blob_storage_id = blob_storage.id
`

type GetFiltersRow struct {
	BlobID                     sql.NullString
	ID                         string
	Name                       sql.NullString
	Discriminator              sql.NullString
	Ratiotestthreshold         sql.NullFloat64
	Minthresholdforsurfmatches sql.NullFloat64
	Minsurfmatches             sql.NullInt64
	Mseskip                    sql.NullFloat64
	FilterID                   sql.NullString
	BlobStorageID              sql.NullString
	ID_2                       sql.NullString
	Path                       sql.NullString
}

func (q *Queries) GetFilters(ctx context.Context) ([]GetFiltersRow, error) {
	rows, err := q.db.QueryContext(ctx, getFilters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFiltersRow
	for rows.Next() {
		var i GetFiltersRow
		if err := rows.Scan(
			&i.BlobID,
			&i.ID,
			&i.Name,
			&i.Discriminator,
			&i.Ratiotestthreshold,
			&i.Minthresholdforsurfmatches,
			&i.Minsurfmatches,
			&i.Mseskip,
			&i.FilterID,
			&i.BlobStorageID,
			&i.ID_2,
			&i.Path,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
