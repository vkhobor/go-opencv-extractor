// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: references.sql

package db

import (
	"context"
)

const addReference = `-- name: AddReference :exec
INSERT into reference_images
(blob_storage_id)
VALUES (?1)
RETURNING blob_storage_id
`

func (q *Queries) AddReference(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, addReference, id)
	return err
}

const deleteReferences = `-- name: DeleteReferences :exec
DELETE FROM reference_images
`

func (q *Queries) DeleteReferences(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteReferences)
	return err
}

const getReferences = `-- name: GetReferences :many
SELECT blob_storage_id, id, path FROM reference_images JOIN blob_storage ON reference_images.blob_storage_id = blob_storage.id
`

type GetReferencesRow struct {
	BlobStorageID string
	ID            string
	Path          string
}

func (q *Queries) GetReferences(ctx context.Context) ([]GetReferencesRow, error) {
	rows, err := q.db.QueryContext(ctx, getReferences)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReferencesRow
	for rows.Next() {
		var i GetReferencesRow
		if err := rows.Scan(&i.BlobStorageID, &i.ID, &i.Path); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
