// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: video.sql

package db

import (
	"context"
	"database/sql"
)

const addYtVideo = `-- name: AddYtVideo :one
INSERT INTO
  yt_videos (id, job_id)
VALUES
  (?, ?) RETURNING id, job_id
`

type AddYtVideoParams struct {
	ID    string
	JobID sql.NullString
}

func (q *Queries) AddYtVideo(ctx context.Context, arg AddYtVideoParams) (YtVideo, error) {
	row := q.db.QueryRowContext(ctx, addYtVideo, arg.ID, arg.JobID)
	var i YtVideo
	err := row.Scan(&i.ID, &i.JobID)
	return i, err
}

const getJobVideosWithProgress = `-- name: GetJobVideosWithProgress :many
SELECT
  yt_videos.id, job_id, download_attempts.id, download_attempts.yt_video_id, download_attempts.progress, blob_storage_id, download_attempts.error, import_attempts.id, import_attempts.yt_video_id, filter_id, import_attempts.progress, import_attempts.error
FROM
  yt_videos
  LEFT JOIN download_attempts ON yt_videos.id = download_attempts.yt_video_id
  LEFT JOIN import_attempts ON yt_videos.id = import_attempts.yt_video_id
WHERE
  yt_videos.job_id = ?
`

type GetJobVideosWithProgressRow struct {
	ID            string
	JobID         sql.NullString
	ID_2          sql.NullString
	YtVideoID     sql.NullString
	Progress      sql.NullInt64
	BlobStorageID sql.NullString
	Error         sql.NullString
	ID_3          sql.NullString
	YtVideoID_2   sql.NullString
	FilterID      sql.NullString
	Progress_2    sql.NullInt64
	Error_2       sql.NullString
}

func (q *Queries) GetJobVideosWithProgress(ctx context.Context, jobID sql.NullString) ([]GetJobVideosWithProgressRow, error) {
	rows, err := q.db.QueryContext(ctx, getJobVideosWithProgress, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetJobVideosWithProgressRow
	for rows.Next() {
		var i GetJobVideosWithProgressRow
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.ID_2,
			&i.YtVideoID,
			&i.Progress,
			&i.BlobStorageID,
			&i.Error,
			&i.ID_3,
			&i.YtVideoID_2,
			&i.FilterID,
			&i.Progress_2,
			&i.Error_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScrapedVideos = `-- name: GetScrapedVideos :many
SELECT
  yt_videos.id AS yt_video_id,
  jobs.id AS job_id,
  jobs.search_query,
  jobs.filter_id
FROM
  yt_videos
  LEFT JOIN download_attempts ON yt_videos.id = download_attempts.yt_video_id
  JOIN jobs ON jobs.id = yt_videos.job_id
WHERE
  download_attempts.yt_video_id IS NULL
`

type GetScrapedVideosRow struct {
	YtVideoID   string
	JobID       string
	SearchQuery sql.NullString
	FilterID    sql.NullString
}

func (q *Queries) GetScrapedVideos(ctx context.Context) ([]GetScrapedVideosRow, error) {
	rows, err := q.db.QueryContext(ctx, getScrapedVideos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetScrapedVideosRow
	for rows.Next() {
		var i GetScrapedVideosRow
		if err := rows.Scan(
			&i.YtVideoID,
			&i.JobID,
			&i.SearchQuery,
			&i.FilterID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideosDownloaded = `-- name: GetVideosDownloaded :many
SELECT
  yt_videos.id as yt_video_id,
  jobs.id AS job_id,
  jobs.search_query,
  jobs.filter_id,
  blob_storage.path AS path
FROM
  yt_videos
  JOIN download_attempts ON yt_videos.id = download_attempts.yt_video_id
  JOIN blob_storage ON download_attempts.blob_storage_id = blob_storage.id
  LEFT JOIN import_attempts ON yt_videos.id = import_attempts.yt_video_id
  JOIN jobs ON jobs.id = yt_videos.job_id
WHERE
  import_attempts.yt_video_id IS NULL
`

type GetVideosDownloadedRow struct {
	YtVideoID   string
	JobID       string
	SearchQuery sql.NullString
	FilterID    sql.NullString
	Path        string
}

func (q *Queries) GetVideosDownloaded(ctx context.Context) ([]GetVideosDownloadedRow, error) {
	rows, err := q.db.QueryContext(ctx, getVideosDownloaded)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVideosDownloadedRow
	for rows.Next() {
		var i GetVideosDownloadedRow
		if err := rows.Scan(
			&i.YtVideoID,
			&i.JobID,
			&i.SearchQuery,
			&i.FilterID,
			&i.Path,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYtVideo = `-- name: GetYtVideo :one
SELECT
  id, job_id
FROM
  yt_videos
WHERE
  id = ?
`

func (q *Queries) GetYtVideo(ctx context.Context, id string) (YtVideo, error) {
	row := q.db.QueryRowContext(ctx, getYtVideo, id)
	var i YtVideo
	err := row.Scan(&i.ID, &i.JobID)
	return i, err
}
