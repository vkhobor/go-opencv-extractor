// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: stat.sql

package db

import (
	"context"
)

const listImportedVideosWithSaved = `-- name: ListImportedVideosWithSaved :many
SELECT yt_videos.id, COUNT(pictures.id) as 'importedPictures' FROM yt_videos
LEFT JOIN pictures ON yt_videos.id = pictures.yt_video_id
GROUP BY yt_videos.id
HAVING yt_videos.status = 'imported'
`

type ListImportedVideosWithSavedRow struct {
	ID               string
	Importedpictures int64
}

func (q *Queries) ListImportedVideosWithSaved(ctx context.Context) ([]ListImportedVideosWithSavedRow, error) {
	rows, err := q.db.QueryContext(ctx, listImportedVideosWithSaved)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListImportedVideosWithSavedRow
	for rows.Next() {
		var i ListImportedVideosWithSavedRow
		if err := rows.Scan(&i.ID, &i.Importedpictures); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
