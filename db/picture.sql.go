// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: picture.sql

package db

import (
	"context"
	"database/sql"
)

const addPicture = `-- name: AddPicture :one
INSERT into pictures
    (id, yt_video_id, frame_number, blob_storage_id)
    VALUES (?,?,?,?)
RETURNING id, yt_video_id, frame_number, blob_storage_id, "foreign"
`

type AddPictureParams struct {
	ID            string
	YtVideoID     sql.NullString
	FrameNumber   sql.NullInt64
	BlobStorageID sql.NullString
}

func (q *Queries) AddPicture(ctx context.Context, arg AddPictureParams) (Picture, error) {
	row := q.db.QueryRowContext(ctx, addPicture,
		arg.ID,
		arg.YtVideoID,
		arg.FrameNumber,
		arg.BlobStorageID,
	)
	var i Picture
	err := row.Scan(
		&i.ID,
		&i.YtVideoID,
		&i.FrameNumber,
		&i.BlobStorageID,
		&i.Foreign,
	)
	return i, err
}

const allPicturesCount = `-- name: AllPicturesCount :one
SELECT COUNT(*) as count_all FROM pictures
`

func (q *Queries) AllPicturesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, allPicturesCount)
	var count_all int64
	err := row.Scan(&count_all)
	return count_all, err
}

const getPictures = `-- name: GetPictures :many
SELECT id, yt_video_id, frame_number, blob_storage_id, "foreign" FROM pictures 
LIMIT ? OFFSET ?
`

type GetPicturesParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) GetPictures(ctx context.Context, arg GetPicturesParams) ([]Picture, error) {
	rows, err := q.db.QueryContext(ctx, getPictures, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Picture
	for rows.Next() {
		var i Picture
		if err := rows.Scan(
			&i.ID,
			&i.YtVideoID,
			&i.FrameNumber,
			&i.BlobStorageID,
			&i.Foreign,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
